# Import numpy and pandas
import numpy as np
import pandas as pd
import seaborn as sns

# Read the CSV file into a DataFrame: df
df = pd.read_csv('gapminder.csv')
print(df)
# Create arrays for features and target variable
# to drop the column we use 
# A = df.drop('HIV',axis=1).values
y = df.loc[:,['HIV']].values
X = df.loc[:,['fertility']].values
# print('A = ',A)
print('y = ',y)
print('X = ',X)
print(type(X))
print(type(y))
# print('df = ',df)
# Print the dimensions of X and y before reshaping
print("Dimensions of y before reshaping: {}".format(y.shape))
print("Dimensions of X before reshaping: {}".format(X.shape))

# Reshape X and y
y = y.reshape(-1,1)
X = X.reshape(-1,1)
print('y = ',y)
print('X = ',X)
print(type(X))
print(type(y))
# Print the dimensions of X and y after reshaping
print("Dimensions of y after reshaping: {}".format(y.shape))
sns.set()
ase = sns.heatmap(df.corr(), square=True, cmap='RdYlGn')
print("Dimensions of X after reshaping: {}".format(X.shape))



# Import LinearRegression
from sklearn.linear_model import LinearRegression

# Create the regressor: reg
reg = LinearRegression()

# Create the prediction space
prediction_space = np.linspace(min(X_fertility), max(X_fertility)).reshape(-1,1)

# Fit the model to the data
reg.fit(X_fertility, y)

# Compute predictions over the prediction space: y_pred
y_pred = reg.predict(prediction_space)

# Print R^2 
print(reg.score(prediction_space, y_pred))

# Plot regression line
plt.plot(prediction_space, y_pred, color='black', linewidth=3)
plt.show()



# Import necessary modules
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=42)

# Create the regressor: reg_all
reg_all = LinearRegression()

# Fit the regressor to the training data
reg_all.fit(X_train, y_train)

# Predict on the test data: y_pred
y_pred = reg_all.predict(X_test)

# Compute and print R^2 and RMSE
print("R^2: {}".format(reg_all.score(X_test, y_test)))
rmse = np.sqrt(mean_squared_error(y_test,y_pred))
print("Root Mean Squared Error: {}".format(rmse))


# Cross Validation set

# Import the necessary modules
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
import numpy as np

# Create a linear regression object: reg
reg = LinearRegression()

# Compute 5-fold cross-validation scores: cv_scores
cv_scores = cross_val_score(reg , X , y , cv = 5)

# Print the 5-fold cross-validation scores
print(cv_scores)

print("Average 5-Fold CV Score: {}".format(np.mean(cv_scores)))
